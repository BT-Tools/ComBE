definition

module Common
exports
  sorts WATER WATERTOKEN WATERTOKENSTART WATERTOKENSEPARATOR WATERTOKENSTAR

  lexical syntax
    ~[A-Za-z0-9\_]                 -> WATERTOKENSTART     {recover, avoid}
    WATERTOKENSTART [A-Za-z0-9\_]* -> WATERTOKEN          
    ~[A-Za-z0-9\_\ \t\12\r\n\*]    -> WATERTOKENSEPARATOR {recover, avoid}
    "*"                            -> WATERTOKENSTAR      {recover, avoid}
    WATERTOKEN                     -> WATER               
    WATERTOKENSEPARATOR            -> WATER               
    WATERTOKENSTAR                 -> WATER               
                                   -> WATEREOF            

  lexical restrictions
    WATERTOKEN -/- [A-Za-z0-9\_]
    WATERTOKENSTAR -/- [\/]

  context-free syntax
    WATER -> LAYOUT {cons("WATER")}

  (

  sorts WATEREOF

  lexical restrictions
    WATEREOF -/- ~[]

  lexical syntax
    %% Lexical insertion recovery rules                              
    "\""                                          -> INSERTOPENQUOTE {recover}
    INSERTOPENQUOTE StringChar* "\n"              -> STRING          {cons("INSERTEND")}
    INSERTOPENQUOTE StringChar* WATEREOF          -> STRING          {cons("INSERTEND")}
    "/*"                                          -> INSERTSTART     {recover}
    INSERTSTART ( ~[\*] | CommentChar )* WATEREOF -> LAYOUT          {cons("INSERTEND")}
                                                  -> "#RT"           {recover, cons("INSERTION")}
                                                  -> "#T"            {recover, cons("INSERTION")}
                                                  -> "#C"            {recover, cons("INSERTION")}
                                                  -> "#SC"           {recover, cons("INSERTION")}
                                                  -> ";;"            {recover, cons("INSERTION")}
                                                  -> "_"             {recover, cons("INSERTION")}

  syntax
    %% Kernel syntax insertion recovery rules   

  )

  (

  lexical syntax
    [a-zA-Z] [a-zA-Z0-9]*              -> ID            
    ~[\n\r\ \;]+                       -> Label         
    ~[\n\r\ \;]+                       -> NodeLabel     
    "-"? [0-9]+                        -> INT           
    "\"" StringChar* "\""              -> STRING        
    ~[\"\n]                            -> StringChar    
    "\\\""                             -> StringChar    
    BackSlashChar                      -> StringChar    
    "\\"                               -> BackSlashChar 
    [\ \t\n\r]                         -> LAYOUT        
    [\*]                               -> CommentChar   
    "/*" ( ~[\*] | CommentChar )* "*/" -> LAYOUT        
    "//" ~[\n\r]* [\n\r] | EOF         -> LAYOUT        
                                       -> EOF           

  lexical restrictions
    CommentChar -/- [\/]
    INT -/- [0-9]
    ID -/- [a-zA-Z0-9\_]
    Label -/- ~[\n\r\ \;]
    EOF -/- ~[]
    BackSlashChar -/- [\"]

  context-free restrictions
    LAYOUT? -/- [\ \t\n\r]
    LAYOUT? -/- [\/] . [\/]
    LAYOUT? -/- [\/] . [\*]

  lexical syntax
    "--"  -> NodeLabel {reject}
    "&"   -> NodeLabel {reject}
    "|"   -> NodeLabel {reject}
    "%"   -> NodeLabel {reject}
    "=>"  -> NodeLabel {reject}
    "^"   -> NodeLabel {reject}
    "^^"  -> NodeLabel {reject}
    "="   -> NodeLabel {reject}
    "XOR" -> NodeLabel {reject}
    "#N{" -> NodeLabel {reject}
    "#P{" -> NodeLabel {reject}

  )

module ComBE
imports Common

exports
  context-free start-symbols
    Start

  context-free syntax
    "#RT" Requirement* Component* ( "#T" Root )?           -> Start        {cons("Specification")}
    ID Label                                               -> Requirement  {cons("Requirement")}
    "#C" ID Label BehaviorSeq*                             -> Component    {cons("StandardComponent")}
    "#SC" ID Label BehaviorSeq*                            -> Component    {cons("SystemComponent")}
    BehaviorType behavior:Behavior*                        -> BehaviorSeq  {cons("BehaviorSeq")}
    INT Label                                              -> Behavior     {cons("Behavior")}
    BehaviorTree                                           -> Root         {cons("Root")}
    {nodes:Node ";;"}+ ( ";" child:BehaviorTree )?         -> BehaviorTree {cons("AtomicSequence")}
    {nodes:Node ";;"}+ "#N" "{" children:BehaviorTree* "}" -> BehaviorTree {cons("AlternativeBranch")}
    {nodes:Node ";;"}+ "#P" "{" children:BehaviorTree* "}" -> BehaviorTree {cons("ParallelBranch")}
    ID TraceabilityStatus ID INT NodeLabel? Operator       -> Node         {cons("StandardNode")}
    "_" Label? Operator                                    -> Node         {cons("EmptyNode")}

  lexical syntax
    StateRealisation:"#S" -> BehaviorType       
    Selection:"#L"        -> BehaviorType       
    Event:"#E"            -> BehaviorType       
    Guard:"#G"            -> BehaviorType       
    IIEvent:"#II"         -> BehaviorType       
    IOEvent:"#IO"         -> BehaviorType       
    EIEvent:"#EI"         -> BehaviorType       
    EOEvent:"#EO"         -> BehaviorType       
    Assertion:"#A"        -> BehaviorType       
    None:""               -> TraceabilityStatus 
    Implied:"+"           -> TraceabilityStatus 
    Missing:"-"           -> TraceabilityStatus 
    Updated:"++"          -> TraceabilityStatus 
    Deleted:"--"          -> TraceabilityStatus 
    Refinement:"+-"       -> TraceabilityStatus 
    None:""               -> Operator           
    BranchKill:"--"       -> Operator           
    Conjunction:"&"       -> Operator           
    Disjunction:"|"       -> Operator           
    May:"%"               -> Operator           
    Reference:"=>"        -> Operator           
    Reversion:"^"         -> Operator           
    StartNew:"^^"         -> Operator           
    Synchronisation:"="   -> Operator           
    XOR:"XOR"             -> Operator           

  lexical syntax
    "XOR" -> ID {reject}