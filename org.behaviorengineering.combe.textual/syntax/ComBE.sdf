module ComBE
exports
  context-free start-symbols
    Start

  context-free syntax
    "#RT" Requirement* Component* Root?                     -> Start               {cons("Specification")}
    INTorID Label                                           -> Requirement         {cons("Requirement")}
    "#C" INTorID Label BehaviorSeq*                         -> Component           {cons("StandardComponent")}
    "#SC" INTorID Label BehaviorSeq*                        -> Component           {cons("SystemComponent")}
    BehaviorType Behavior*                                  -> BehaviorSeq         {cons("BehaviorSeq")}
    INTorID Label                                           -> Behavior            {cons("Behavior")}
    "#T" BehaviorTree                                       -> Root                {cons("Root")}
    AtomicSequence AtomicSequenceChild?                     -> BehaviorTree        {cons("AtomicSequence")}
    AtomicSequence "#N" "{" BranchChildren "}"              -> BehaviorTree        {cons("AlternativeBranch")}
    AtomicSequence "#P" "{" BranchChildren "}"              -> BehaviorTree        {cons("ParallelBranch")}
    {Node ";;"}+                                            -> AtomicSequence      
    ";" BehaviorTree                                        -> AtomicSequenceChild 
    BehaviorTree*                                           -> BranchChildren      
    INTorID TraceabilityStatus? INTorID INTorID LabelAndOp? -> Node                {cons("StandardNode")}
    "_" LabelAndOp?                                         -> Node                {cons("EmptyNode")}
    NodeLabel? Operator                                     -> LabelAndOp          

  context-free syntax
    CONTENTCOMPLETE -> Start               {cons("COMPLETION-Start")}
    CONTENTCOMPLETE -> Requirement         {cons("COMPLETION-Requirement")}
    CONTENTCOMPLETE -> Component           {cons("COMPLETION-Component")}
    CONTENTCOMPLETE -> BehaviorSeq         {cons("COMPLETION-BehaviorSeq")}
    CONTENTCOMPLETE -> Behavior            {cons("COMPLETION-Behavior")}
    CONTENTCOMPLETE -> Root                {cons("COMPLETION-Root")}
    CONTENTCOMPLETE -> BehaviorTree        {cons("COMPLETION-BehaviorTree")}
    CONTENTCOMPLETE -> AtomicSequence      {cons("COMPLETION-AtomicSequence")}
    CONTENTCOMPLETE -> AtomicSequenceChild {cons("COMPLETION-AtomicSequenceChild")}
    CONTENTCOMPLETE -> BranchChildren      {cons("COMPLETION-BranchChildren")}
    CONTENTCOMPLETE -> Node                {cons("COMPLETION-Node")}
    CONTENTCOMPLETE -> LabelAndOp          {cons("COMPLETION-LabelAndOp")}

  lexical syntax
    StateRealisation:"#S" -> BehaviorType       
    Selection:"#L"        -> BehaviorType       
    Event:"#E"            -> BehaviorType       
    Guard:"#G"            -> BehaviorType       
    IIEvent:"#II"         -> BehaviorType       
    IOEvent:"#IO"         -> BehaviorType       
    EIEvent:"#EI"         -> BehaviorType       
    EOEvent:"#EO"         -> BehaviorType       
    Assertion:"#A"        -> BehaviorType       
    Implied:"+"           -> TraceabilityStatus 
    Missing:"-"           -> TraceabilityStatus 
    Updated:"++"          -> TraceabilityStatus 
    Deleted:"--"          -> TraceabilityStatus 
    Refinement:"+-"       -> TraceabilityStatus 
    BranchKill:"--"       -> Operator           
    Conjunction:"&"       -> Operator           
    Disjunction:"|"       -> Operator           
    May:"%"               -> Operator           
    Reference:"=>"        -> Operator           
    Reversion:"^"         -> Operator           
    StartNew:"^^"         -> Operator           
    Synchronisation:"="   -> Operator           
    XOR:"XOR"             -> Operator           

  lexical syntax
    [a-zA-Z0-9]+   -> INTorID   
    ~[\n\r\ \;\#]+ -> Label     
    ~[\n\r\ \;]+   -> NodeLabel 

  lexical restrictions
    INTorID -/- [a-zA-Z0-9\_]
    Label -/- ~[\n\r\ \;\#]