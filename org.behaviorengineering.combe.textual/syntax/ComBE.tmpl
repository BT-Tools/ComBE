context-free start-symbols
  
    Start

templates

	Start.Specification = 
	<
	  #RT <Requirement*; separator="\n">
		
	  <Component*; separator="\n">
		 
	  <Root?>
	>
 
	Requirement.Requirement = <<ID> <Label>>
	Component.StandardComponent = 
		<#C <ID> <Label> 
		 <BehaviorSeq*; separator="\n">
		 >
	Component.SystemComponent = 
		<#SC <ID> <Label>
		 <BehaviorSeq*; separator="\n">
		>
	BehaviorSeq.BehaviorSeq = <<BehaviorType> <Behavior*; separator="\n">>
	Behavior.Behavior = <<INT> <Label>>
	
	Root.Root = <#T <BehaviorTree>> %% workaround for GMF phantom node bug
	BehaviorTree.AtomicSequence = <<AtomicSequence> <AtomicSequenceChild?>>
	BehaviorTree.AlternativeBranch = 
		<
		  <AtomicSequence> #N { 
		    <BranchChildren>
		  }>
	BehaviorTree.ParallelBranch = 
		<<AtomicSequence> #P {
	        <BranchChildren>
	      }>
	AtomicSequence = <<Node+; separator=";;">>
	AtomicSequenceChild = <; <BehaviorTree>>
	BranchChildren = <<BehaviorTree*; separator="\n">>

	Node.StandardNode = <<ID> <TraceabilityStatus?> <ID> <INT> <LabelAndOp?>>
	LabelAndOp = <<NodeLabel> <Operator>>
	Node.EmptyNode = <_ <LabelAndOp?>>
		
 lexical syntax
  	
  	StateRealisation:"#S"	-> BehaviorType
	Selection:"#L"			-> BehaviorType
	Event:"#E"				-> BehaviorType
	Guard:"#G"				-> BehaviorType
	IIEvent:"#II"			-> BehaviorType
	IOEvent:"#IO"			-> BehaviorType
	EIEvent:"#EI"			-> BehaviorType
	EOEvent:"#EO"			-> BehaviorType
	Assertion:"#A"			-> BehaviorType
  	
  	Implied:"+"				-> TraceabilityStatus
	Missing:"-"				-> TraceabilityStatus
	Updated:"++"			-> TraceabilityStatus 
	Deleted:"--"			-> TraceabilityStatus
	Refinement:"+-"			-> TraceabilityStatus
  	
	BranchKill:"--"			-> Operator
	Conjunction:"&"			-> Operator
	Disjunction:"|"			-> Operator
	May:"%"					-> Operator
	Reference:"=>"			-> Operator
	Reversion:"^"			-> Operator
	StartNew:"^^"			-> Operator
	Synchronisation:"="		-> Operator
	XOR:"XOR"				-> Operator
	
  lexical syntax
  
    [a-zA-Z][a-zA-Z0-9]* -> ID
    ~[\n\r\ \;]+	     -> Label
    ~[\n\r\ \;]+	     -> NodeLabel
    "-"? [0-9]+          -> INT

	
  lexical syntax
		
	"XOR" 	-> ID {reject}	
	
  lexical restrictions
  
    %% Ensure greedy matching for lexicals
    INT           -/- [0-9]
    ID            -/- [a-zA-Z0-9\_]
    Label         -/- ~[\n\r\ \;]