module lib/index-library.generated

imports
  libstratego-lib
  lib/editor-common.generated
  
signature constructors
  
  // Index elements
  DefData      : List(UriPart) * DefDataType * Term -> Summary
    
  // URI header
  Namespace      : UriPart
  Unresolved     : Namespace -> UriPart
  INTERNAL_ERROR : UriPart
  Timestamp      : UriPart
 
  // Remainder of URI
  String : UriPart
  Anon   : Int -> UriPart
  Anon   : UriPart
  
  FileEntries : Term * Term -> Term
  
  // Globals
  Global : Namespace
  Global : List(UriPart) -> Summary
  Global : List(UriPart) * List(Summary) -> Summary
  
  // None namespace
  None   : Namespace
  
rules // Index management
   
  /**
   * Sets up the index library for given language and project paths.
   * Must be called once before doing anything with the library.
   *
   * @param language      The language to set the index up for.
   * @param project-path  The project paths that contain all source files to analyse and compile.
   *
   * @obsolete
   * @type x -> x
   */
  index-setup(|language, project-paths) =
    obsolete(!"index-setup(|language, project-paths); use index-setup(|language, project-paths, current-file)");
    index-setup(|language, project-paths, ".")
    
  /**
   * Sets up the index library for given language, project paths and current file.
   * Must be called once before doing anything with the library.
   *
   * Example:
   *   <index-setup(|"MiniJava", [<project-path>], "test/test.mjv")
   *
   * @param language      The language to set the index up for.
   * @param project-path  The project paths that contain all source files to analyse and compile.
   * @param current-file  The current file that is being analysed. Can be retrieved later using index-get-current-file.
   *                      Can also be changed later using index-set-current-file.
   * @type x -> x
   */
  index-setup(|language, project-paths, current-file) =
    prim("LANG_index_setup", language, project-paths, current-file)
    
  /**
   * Sets the current file the index (analysis) is operating on to the given file.
   *
   * Example:
   *   <index-set-current-file> "fullpath/file.ext"
   *   <index-set-current-file> ("fullpath/file.ext", "subfile")
   *
   * @type x -> ?x
   */
  index-set-current-file = 
    prim("LANG_index_set_current_file", <id>)

  /**
   * Adds given element to the index with given file path and optionally subfile.
   *
   * Example:
   *   <index-add(|"fullpath/file.ext")> Def([Entity(), "Bar"])
   *   <index-add(|("fullpath/file.ext", "subfile"))> Def([Entity(), "Bar"])
   *
   * @param file  The file (and subfile) to add the element to.
   * @type x -> ?x
   */
  index-add(|file) =
    prim("LANG_index_add", <id>, file)

  /**
   * Adds all given elements to the index with given file path and optionally subfile.
   *
   * Example:
   *   <index-add-all(|"fullpath/file.ext")> [Def([Entity(), "Bar"]), ...]
   *   <index-add-all(|("fullpath/file.ext", "subfile"))> [Def([Entity(), "Bar"]), ...]
   *
   * @param file  The file (and subfile) to add the elements to.
   * @type List(x) -> ?List(x)
   */
  index-add-all(|file) =
    list-loop(with(index-add(|file)))
    
  /**
   * Removes given element from the index that is contained in given file path and optionally subfile.
   *
   * Example:
   *   <index-remove(|"fullpath/file.ext")> Def([Entity(), "Bar"])
   *   <index-remove(|("fullpath/file.ext", "subfile"))> Def([Entity(), "Bar"])
   * 
   * @param file  The file (and subfile) to remove the element from.
   * @type x -> ?x
   */
  index-remove(|file) =
    prim("LANG_index_remove", <id>, file)
    
  /**
   * Removes all given elements from the index that are contained in given file path and optionally subfile.
   *
   * Example:
   *   <index-remove-all(|"fullpath/file.ext")> [Def([Entity(), "Bar"]), ...]
   *   <index-remove-all(|("fullpath/file.ext", "subfile"))> [Def([Entity(), "Bar"]), ...]
   *
   * @param file  The file (and subfile) to remove the elements from.
   * @type List(x) -> ?List(x)
   */
  index-remove-all(|file) =
    list-loop(with(index-remove(|file)))
    
  /**
   * Removes all elements from the index that are contained in given file path and optionally subfile.
   *
   * Example:
   *   <index-clear-file> "fullpath/file.ext"
   *   <index-clear-file> ("fullpath/file.ext", "subfile")
   *
   * @type x -> ?x
   */
  index-clear-file = 
    prim("LANG_index_clear_file", <id>)
    
  /**
   * Clears all elements from the index.
   *
   * @type x -> x
   */
  index-clear = 
    prim("LANG_index_clear_all")
   
  /**
   * Commits index to a file on disk.
   *
   * @type x -> x
   */
  index-commit = 
    prim("LANG_index_commit")

  /**
   * Starts a transaction on the index for the current file. Additions to the index are not visible to other files 
   * until index-end-transaction is called. Operations on the index are only thread safe during a transaction.
   *
   * @type x -> x
   */
  index-start-transaction = 
    prim("LANG_index_start_transaction")
  
  /**
   * Ends a transaction on the index for the current file. Additions made to the index during the transaction are
   * added to the global index visible for other files. Operations on the index are not thread safe any more after 
   * this call.
   *
   * @type x -> x
   */
  index-end-transaction = 
    prim("LANG_index_end_transaction")
  
  /**
   * Starts a transaction, applies given strategy and ends the transaction. All index operations used from the given
   * strategy are thread safe.
   * 
   * @param s The strategy to apply. Transaction will still properly end if strategy fails.
   * @type x -> x'
   *
   * @see index-start-transaction
   * @see index-end-transaction
   */
  index-transaction(s) = 
    prim("LANG_index_start_transaction"); try(s); prim("LANG_index_end_transaction")
  
rules // Index querying
  
  /**
   * Gets the file that the analysis is currently in.
   *
   * @type x -> (file, subfile)
   *
   * @see index-setup(|language, project-paths, current-file)
   * @see index-set-current-file
   */
  index-get-current-file =
    prim("LANG_index_get_current_file")
  
  /**
   * Gets a list of all files and subfiles for current project.
   *
   * Example:
   *   <index-get-all-files> => [("fullpath/file.ext", "subfile"), ...]
   *
   * @type x -> List((file, subfile))
   */   
  index-get-all-files =
    prim("LANG_index_all_files")
  
  /**
   * Gets all index entries for the given file path and optionally subfile.
   *
   * Examples:
   *   <index-get-all-in-file> "fullpath/file.ext" => [Def([Entity(), "Bar"]), ...]
   *   <index-get-all-in-file> ("fullpath/file.ext", "subfile") => [Def([Entity(), "Bar"]), ...]
   *
   * @type file or (file, subfile) -> List(elem)
   */  
  index-get-all-in-file:
    filepath -> entries
    with
      entries := <prim("LANG_index_get_all_in_file", filepath)>
   
  /**
   * Gets index entries in some namespace for the given file path and optionally subfile.
   *
   * Example:
   *   <index-get-all-in-file(|Import())> "fullpath/file.ext" => [Def([Import(), "Bar"]), ...]
   *   <index-get-all-in-file(|Import())> ("fullpath/file.ext", "subfile") => [Def([Import(), "Bar"]), ...]
   *
   * @param namespace Only index entries from this namespace are retrieved.
   * @type file or (file, subfile) -> List(elem)
   */  
  index-get-all-in-file(|namespace):
    filepath -> entries
    with
      // TODO: Optimize -- add an argument to LANG_index_get_all_in_file to do this filtering
      entries := <prim("LANG_index_get_all_in_file", filepath)>;
      filter(where(index-uri => [namespace | _]))
    
  /**
   * Gets the revision of a file and optionally subfile.
   *
   * Example:
   *   <index-get-file-revision> "fullpath/file.ext" => 13
   *   <index-get-file-revision> ("fullpath/file.ext", "subfile") => 37
   *
   * @type file or (file, subfile) -> Int
   */
  index-get-file-revision:
    file -> <prim("LANG_index_get_file_revision", file)>
    
  /**
   * Gets the containing files and subfiles of index entry with given template.
   *
   * Example:
   *   <index-get-files-of> Def([Entity(), "Bar"]) => [("fullpath/file.ext", "subfile"), ...]
   *
   * @type template -> List((file, subfile))
   */  
  index-get-files-of:
    template -> <prim("LANG_index_get_files_of", template)>
    
  /**
   * Get all index entries that match the given template.
   *
   * Example:
   *   <indexlib-get-all> Def([Entity(), "Bar"]) => [Def([Entity(), "Bar"]), ...]
   *
   * @type template -> List(elem)
   */
  indexlib-get-all:
    template -> <prim("LANG_index_get", template)>
    
  /**
   * Get all values of index entries that match the given template.
   *
   * Example:
   *   <indexlib-get-all-values> DefData([Property(), "s"], Type(), ()) => [TYPE("String"), ...]
   *
   * @type template -> List(value)
   *
   * @see index-value
   */
  indexlib-get-all-values:
    template -> <map(index-value)> <indexlib-get-all> template
 
  /**
   * Get the first index entry that matches the given template, or fail.
   *
   * Example:
   *   <indexlib-get> Def([Entity(), "Bar"]) => Def([Entity(), "Bar"])
   *
   * @type template -> ?elem
   */
  indexlib-get:
    template -> <?[<id>|_]> <indexlib-get-all> template
   
  /**
   * Get the value of first index entry that matches the given template, or fail.
   *
   * Example:
   *   <indexlib-get-value> DefData([Entity(), "Bar"], Type(), ()) => TYPE("Bar")
   *
   * @type template -> ?value
   *
   * @see index-value
   */
  indexlib-get-value:
    template -> <index-value> <?[<id>|_]> <indexlib-get-all> template
    
rules // Index globals
    
  /**
   * Gets the 'fake' path where globals are stored in the index.
   *
   * @internal
   */
  index-globals-path = 
    !"/.internal/globals"
    
  /**
   * Gets the URI where globals are stored in the index for given name or names.
   *
   * @internal
   * @type name or List(name) -> uri
   */
  index-globals-uri:
    names -> uri
    with
      if is-list then
        uri := <concat> [[Global()], names, ["globals", ".internal"]]
      else
        uri := [Global(), names, "global", ".internal"]
      end
    
  /**
   * Gets the first value in global storage with given name, or fail.
   *
   * Example:
   *   index-get-global(|"last-compile") => Timestamp(1334322856)
   *   index-get-global(|["last-compile", "file.str"]) => Timestamp(1334322856)
   * 
   * @param name  The name or list of names to identify the global value.
   * @type _ -> ?value
   */
  index-get-global(|name):
    _ -> value
    where
      value := <indexlib-get-value> Global(<index-globals-uri> name, ())
    
  /**
   * Gets all values in global storage with given name.
   *
   * Example:
   *   index-get-global(|"last-compile") => [Timestamp(1334322856), ...]
   *   index-get-global(|["last-compile", "file.str"]) => [Timestamp(1334322856), ...]
   *
   * @param name  The name or list of names to identify the global value.
   * @type _ -> List(value)
   */ 
  index-get-all-globals(|name):
    _ -> values
    with
      values := <indexlib-get-all-values> Global(<index-globals-uri> name, ())
    
  /**
   * Add value to global storage with given name.
   *
   * Example:
   *   <index-add-global(|"last-compile")> Timestamp(1334322856)
   *   <index-add-global(|["last-compile", "file.str"])> Timestamp(1334322856)
   *
   * @param name  The name or list of names to identify the global value.
   * @type x -> x
   */   
  index-add-global(|name):
    value -> <id>
    with
      <index-add(|<index-globals-path>)> Global(<index-globals-uri> name, value)
      
  /**
   * Overwrites value in global storage with given value.
   *
   * Example:
   *   <index-set-global(|"last-compile")> Timestamp(1334322856)
   *   <index-set-global(|["last-compile", "file.str"])> Timestamp(1334322856)
   *
   * @param name  The name or list of names to identify the global value.
   * @type x -> x
   */   
  index-set-global(|name):
    value -> <id>
    with
      index-clear-global(|name);
      <index-add-global(|name)> value
    
  /**
   * Removes all values from global storage with given name.
   *
   * Example:
   *   index-clear-global(|"last-compile")
   *   index-clear-global(|["last-compile", "file.str"])
   *
   * @param name  The name or list of names to identify the global value.
   * @type x -> x
   */   
  index-clear-global(|name):
    _ -> <id>
    with
      <index-remove(|<index-globals-path>)> Global(<index-globals-uri> name, ())
      
  /**
   * Gets the URI where boolean globals are stored in the index for given name or names.
   *
   * @internal
   */
  index-boolean-globals-uri:
    names -> uri
    with
      if is-list then
        uri := <concat> [[Global()], names, ["boolean", "globals", ".internal"]]
      else
        uri := [Global(), names, "boolean", "global", ".internal"]
      end
      
  /**
   * Sets boolean value true to global boolean storage with given name.
   *
   * Example:
   *   index-enable-global(|"can-compile")
   *   index-enable-global(|["can-compile", "file.str"])
   *
   * @param name  The name or list of names to identify the global boolean value.
   * @type x -> x
   */   
  index-enable-global(|name):
    _ -> <id>
    with
      <index-add(|<index-globals-path>)> Global(<index-boolean-globals-uri> name)
      
  /**
   * Sets boolean value false to global boolean storage with given name.
   *
   * Example:
   *   index-disable-global(|"can-compile")
   *   index-disable-global(|["can-compile", "file.str"])
   *
   * @param name  The name or list of names to identify the global boolean value.
   * @type x -> x
   */   
  index-disable-global(|name):
    _ -> <id>
    with
      <index-remove(|<index-globals-path>)> Global(<index-boolean-globals-uri> name)
      
  /**
   * Query for boolean value true in global boolean storage with given name.
   *
   * Example:
   *   index-is-global-enabled(|"can-compile")
   *   index-is-global-enabled(|["can-compile", "file.str"])
   *
   * @param name  The name or list of names to identify the global boolean value.
   * @type x -> ?x
   */   
  index-is-global-enabled(|name):
    _ -> <id>
    where
      <indexlib-get> Global(<index-boolean-globals-uri> name)

rules // Index utility
  
  /**
   * Gets the URI part for given term. Can be extended by defining a index-uri-impl rule. If no index-uri-impl rule
   * is defined for the given term the first subterm is used as the URI. Fails if no URI can be retrieved from the
   * given term.
   *
   * Example:
   *   <index-uri> DefData([Entity(), "Bar", "Baz"], Type(), TYPE("Bar")) => [Entity(), "Bar", "Baz"]
   *
   * @type elem -> ?uri
   *
   * @see index-uri-impl
   * @see index-uri-generic
   */ 
  index-uri = 
    index-uri-impl <+ index-uri-generic
  
  /**
   * Gets the namespace part of the given URI.
   *
   * Example:
   *   <index-uri-path> [Entity(), "Bar", "Baz"] => Entity()
   *
   * @type uri@[namespace|path] -> namespace
   */ 
  index-uri-namespace =
    ?[<id>|_]
  
  /**
   * Gets the path part of the given URI.
   *
   * Example:
   *   <index-uri-path> [Entity(), "Bar", "Baz"] => ["Bar", "Baz"]
   *   <index-uri-path> [Entity()] => []
   *
   * @type uri@[namespace|path] -> path
   */ 
  index-uri-path =
    ?[_|<id>]
    
  /**
   * Gets the name part of the given URI or fail if there is no name.
   *
   * Example:
   *   <index-uri-name> [Entity(), "Bar", "Baz"] => "Bar"
   *   <index-uri-name> [Entity()] => fail
   *
   * @type uri@[namespace|[name|restPath]] -> ?name
   */ 
  index-uri-name =
    ?[_|[<id>|_]]
  
  /**
   * Gets the value part for given term. Can be extended by defining a index-value-impl rule. If no index-value-impl 
   * rule is defined for the given term the second subterm is used as the value. Fails if no value can be retrieved
   * from the given term.
   *
   * Example:
   *   <index-value> DefData([Entity(), "Bar", "Baz"], Type(), TYPE("Bar")) => TYPE("Bar")
   *
   * @type elem -> ?value
   *
   * @see index-value-impl
   * @see index-value-generic
   */  
  index-value = 
    index-value-impl <+ index-value-generic
  
  /**
   * Queries if given index file is a 'fake' file for storing internal data.
   *
   * @type x -> ?x
   */
  index-is-fake-file = 
    string-starts-with(|"/.internal")
  
  /**
   * Checks if given URI's are equal. Discards anonymous scopes if necessary.
   *
   * Example:
   *   <index-uri-eq> ([Entity(), Anon("a"), "Bar"], [Entity(), Anon("b"), "Bar"]) => 
   *     ([Entity(), Anon("a"), "Bar"], [Entity(), Anon("b"), "Bar"])
   *   <index-uri-eq> ([Entity(), "Foo"], [Entity(), "Bar"]) => fail
   *
   * @type (u1, u2) -> ?(u1, u2)
   */
  index-uri-eq:
    (u1, u2) -> <id>
    where
      u1' := <index-uri-unwrap> u1;
      u2' := <index-uri-unwrap> u2;
      (<eq> (u1', u2') <+ <eq> (<remove-all(?Anon(_))> u1', <remove-all(?Anon(_))> u2'))
  
  /**
   * Finds the first key (term{uri} element) for given term, or fail. 
   *
   * @type x -> ?name{uri}
   */
  index-find-key:
    x -> key
    where
      key := <collect-one(?_{_})> x
      
  /**
   * Converts a URI to a string.
   *
   * Example:
   *   <index-uri-to-string> [Entity(), "Bar", "Baz"] => "Entity://Bar.Baz"
   *
   * @type uri -> str
   */
  index-uri-to-string:
    [ns|path] -> <concat-strings> [nsStr, "://", pathStr]
    with
      pathStr := <take-until(?Anon(_)); reverse; separate-by(|"."); concat-strings> path;
      nsStr := <?<id>#(_)> ns
  
  /**
   * Converts a file to a string.
   *
   * Example:
   *   <index-file-to-string> "fullpath/file.ext" => "fullpath/file.ext"
   *
   * @type file -> file
   */
  index-file-to-string:
    file -> file
    where
      not(<is-tuple> file)
  
  /**
   * Converts a file ((file, subfile) tuple) to a string.
   *
   * Example:
   *   <index-file-to-string> ("fullpath/file.ext", []) => "fullpath/file.ext"
   *
   * @type (file, []) -> file
   */
  index-file-to-string:
    (file, []) -> file
    
  /**
   * Converts a file ((file, subfile) tuple) to a string.
   *
   * Example:
   *   <index-file-to-string> ("fullpath/file.ext", [Entity(), "Foo" "Bar"]) => "fullpath/file.ext@Entity://Foo.Bar"
   *
   * @type (file, subfile) -> str
   */
  index-file-to-string:
    (file, subfile) -> <concat-strings> [file, "@", <index-uri-to-string> subfile]
    where
      not([] := subfile)

  /**
   * Converts a file to a URI.
   *
   * Example:
   *   <index-file-to-uri> "fullpath/file.ext" => [None(), "fullpath/file.ext"]
   *
   * @type file -> uri
   */      
  index-file-to-uri:
    file -> [None(), file]
    where
      not(<is-tuple> file)
      
  /**
   * Converts a file ((file, subfile) tuple) to a URI.
   *
   * Example:
   *   <index-file-to-uri> ("fullpath/file.ext", []) => [None(), "fullpath/file.ext]
   *
   * @type (file, subfile) -> uri
   */      
  index-file-to-uri:
    (file, []) -> [None(), file]
    
  /**
   * Converts a file ((file, subfile) tuple) to a URI.
   *
   * Example:
   *   <index-file-to-uri> ("fullpath/file.ext", [Entity(), "Foo" "Bar"]) => [Entity(), "Foo", "Bar", "fullpath/file.ext"]
   *
   * @type (file, subfile) -> uri
   */      
  index-file-to-uri:
    (file, subfile) -> <conc> ([file], subfile)
    where
      not([] := subfile)
      
/** @internal */
rules // URI and value projections
  
  /** @internal */
  index-uri-impl:
    DefData(uri, _, _) -> uri

  /** @internal */
  index-uri-generic:
    term -> <?_#(<?[<id>|_]>)> term
  
  /** @internal */
  index-value-impl:
    DefData(_, _, value) -> value
    
  /** @internal */
  index-value-generic:
    term -> <?_#(<?[_, <id>|_]> )> term
     
/** @internal */ 
rules // Internal helpers
  
  /** @internal */
  index-namespace-unwrap =
    \Unresolved(n) -> n\ <+ id
    
  /** @internal */
  index-uri-unwrap =
    \[ns|xs] -> [<index-namespace-unwrap> ns|xs]\ <+ id
